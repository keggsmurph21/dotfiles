#!/usr/bin/env python3

from abc import ABC
from enum import Enum
from time import sleep
from typing import Any, Generator, IO, Optional, Set, Sequence, Type

import argparse
import datetime
import hashlib
import os
import pickle
import re
import struct


class Category(Enum):
    Amazon = [
        "Amazon.com*",
        "AMAZON.COM*",
        "AMZN Mktp",
    ]
    Apartment = [
        "COMCAST",
        "LEMONADE I",
        "IKEA",
        "THE HOME DEPOT",
    ]
    Books = [
        "WALDEN POND BOOKS",
    ]
    Grocery = [
        "BERKELEY BOWL",
        "GRAND EXPRESS MARKET",
        "HENG FA",
        "H MART",
        "HYDE PARK PRODUCE",
        "KOREANA PLAZA",
        "STOLTZFUS",
        "TRADER JOE'S",
        "WEIS MARKETS",
        "WHOLEFDS",
    ]
    Laundry = [
        "SHINEPAY LAUNDRY",
    ]
    Moving = [
        "U-BOX",
        "U-HAUL",
    ]
    Other = ["SP * FLATIRON WINES"]
    Payment = [
        "Everlaw, Inc. DES:Expensify",
        "GUSTO DES:",
        "*FINANCE CHARGE*",
        "INTERNATIONAL TRANSACTION FEE",
        "ONLINE BANKING PAYMENT",
        "ONLINE CREDIT CARD PMT",
        "PNC BANK NA DES:ONLINE PYM",
        "VENMO DES:",
    ]
    Programming = [
        "Amazon web services",
        "GOOGLE *Domains",
    ]
    Restaurant = [
        "JONG GA",
    ]
    Sports = [
        "YMCA",
    ]
    Transport = [
        "BART-CLIPPER",
        "LAKEVIEW BICYCLE",
        "LIM*",
        "VENTRA VENDING",
    ]
    Travel = [
        "AIRBNB",
        "AIR CAN",
        "ALASKA AIR",
        "AMERICAN AIR",
        "EXPEDIA",
        "EXXONMOBIL",
        "TRAVEL INSURANCE POLICY",
        "UA INFLT ",
        "UNITED ",
    ]
    Unknown = [
        "Check ",
    ]

    def __init__(self, prefixes: Sequence[str]):
        self.prefixes = prefixes

    @classmethod
    def from_description(cls: Type["Category"], desc: str) -> Set["Category"]:
        candidates: Set["Category"] = set()
        for category in cls:
            for prefix in category.prefixes:
                if desc.startswith(prefix):
                    candidates.add(category)
        return candidates

    @classmethod
    def from_name_prefix(cls: Type["Category"], prefix: str) -> Set["Category"]:
        candidates: Set["Category"] = set()
        prefix = prefix.lower()
        for category in cls:
            if category.name.lower().startswith(prefix):
                candidates.add(category)
        return candidates


class Record(ABC):
    def __init__(self, date: datetime.date, desc: str, amount: float):
        self.date = date
        self.desc = desc
        self.amount = amount
        self.category = Category.Unknown

        m = hashlib.md5()
        m.update(struct.pack("<HHH", date.year, date.month, date.day))
        m.update(desc.encode())
        m.update(struct.pack("<f", amount))
        self.id = m.hexdigest()

    def prompt_category(self) -> None:
        auto_categories = Category.from_description(self.desc)
        if len(auto_categories) == 1:
            self.category = auto_categories.pop()
        else:
            while True:
                try:
                    prefix = input(f"\nCategory for '{self}' ? ").strip()
                except EOFError:
                    return
                matches = Category.from_name_prefix(prefix)
                if len(matches) == 0:
                    matches = set(c for c in Category)
                    print(f"Unrecognized prefix: '{prefix}'")
                elif len(matches) == 1:
                    self.category = matches.pop()
                    return
                elif len(matches) < len(Category):
                    print(f"Ambiguous prefix: '{prefix}'")
                print(f"Categories: {' '.join(sorted([c.name for c in matches]))}")

    def __str__(self) -> str:
        return "\t".join(
            [
                str(self.date),
                self.category.name.lower(),
                self.desc,
                *["" for _ in range(self.spacing_cols)],
                f"${self.sign * record.amount:.02f}",
            ]
        )


class BOARecord(Record):
    sign = 1
    spacing_cols = 0


class PNCRecord(Record):
    sign = -1
    spacing_cols = 3


def parse_date(date_entry: str) -> datetime.date:
    return datetime.datetime.strptime(date_entry, "%m/%d/%Y").date()


def _clean_pnc_currency(amount_entry: str) -> float:
    factor = 1
    if amount_entry.startswith("-"):
        factor = -1
        amount_entry = amount_entry[1:]
    if not amount_entry.startswith("$"):
        raise ValueError("Invalid currency format")
    return float(amount_entry[1:]) * factor


def iter_pnc_records(
    records_fps: Sequence[IO[str]],
) -> Generator[PNCRecord, None, None]:
    if records_fps is None:
        return
    for records_fp in records_fps:
        records_fp.readline()  # consume headerA

        for record_num, record in enumerate(records_fp):
            fields = record.strip().split(",")
            try:
                if len(fields) == 1 and not fields[0]:
                    continue

                else:
                    currency_index = -1
                    while currency_index and fields[currency_index] == '""':
                        currency_index -= 1

                    if not currency_index:
                        raise ValueError("Wrong number of fields")

                    yield PNCRecord(
                        parse_date(fields[0]),
                        re.sub(r"\s+", " ", ", ".join(fields[1:currency_index])),
                        _clean_pnc_currency(fields[currency_index]),
                    )

            except ValueError as e:
                raise ValueError(
                    f"Invalid record at {records_fp.name} record {record_num}: '{fields}'"
                ) from e


def iter_boa_records(
    records_fps: Sequence[IO[str]],
) -> Generator[BOARecord, None, None]:
    if records_fps is None:
        return
    for records_fp in records_fps:
        # Read 8 lines of header (lol)
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()
        records_fp.readline()

        # Read "Beginning balance as of ..." line
        records_fp.readline()

        for record_num, record in enumerate(records_fp):
            record = record.strip()
            match = re.match(
                r"^(\d{2}/\d{2}/\d{4}) {5}(.{70}) +([-\d.,]{3,9}).*$", record
            )
            if match is None:
                raise ValueError(
                    f"Invalid record at {records_fp.name} record {record_num}: '{record}'"
                )

            yield BOARecord(
                parse_date(match.group(1)),
                match.group(2).strip(),
                float(match.group(3).replace(",", "")),
            )


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-b", "--boa", type=argparse.FileType("r"), nargs="*", dest="boa_records"
    )
    parser.add_argument(
        "-p", "--pnc", type=argparse.FileType("r"), nargs="*", dest="pnc_records"
    )
    args = parser.parse_args()

    boa_records = iter_boa_records(args.boa_records)
    pnc_records = iter_pnc_records(args.pnc_records)

    records = [*boa_records, *pnc_records]

    for record in records:
        record.prompt_category()

    for record in records:
        print(record)
