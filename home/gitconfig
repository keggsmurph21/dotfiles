# vim: syntax=gitconfig

[user]
    useConfigOnly = true

[advice]
    detachedHead = false

[grep]
    lineNumber = true

[push]
    default = upstream

[diff]
    mnemonicPrefix = true

[merge]
    tool = vimdiff
    conflictstyle = diff3
    defaultToUpstream = true

[pull]
    ff = only

[color]
    ui = true
    status = auto
    branch = auto

[pretty]
    line = "%C(auto)%h %<|(80,trunc)%s %C(green)%ad %C(blue)%an%C(auto)%d"
    detail = "%C(auto)%h %s%n  %C(yellow)by %C(blue)%an %C(magenta)<%ae> [%G?] %C(green)%ad%n %C(auto)%d%n"

[credential]
    helper = cache

[log]
    date = local

[lfs]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f

[alias]
    a       = add
    ae      = add --edit
    ap      = add --patch
    au      = add --update
    aup     = add --update --patch

    aliases = ! git config --list | grep ^alias | sed 's/^alias.//'

    bd      = branch --delete --force
    bl      = branch --all -vv
    bname   = ! git isempty && echo __NO_HEAD__ || git rev-parse --abbrev-ref HEAD
    btrack  = ! git branch --set-upstream-to origin/$(git bname) $(git bname)
    br      = checkout -b
    brecent = for-each-ref --sort=committerdate
    bo      = boverwrite
    boverwrite = "! __boverwrite() { git bd $1 && git br $1; }; __boverwrite"

    c       = commit
    ca      = commit --amend
    commit  = commit -v

    co      = checkout

    commits = log --pretty=format:"%H"

    conf    = config --edit

    count   = rev-list --count HEAD

    cp      = cherry-pick

    d       = diff
    ds      = diff --stat
    dv      = diff -vv
    dw      = diff --color-words
    dc      = diff --cached
    dcs     = diff --cached --stat
    dcv     = diff --cached -vv
    dcw     = diff --cached --color-words

    dir     = rev-parse --show-toplevel

    # drop the most recent commit from the local tree
    # NB: this can be undone by running
    #   $ git reflog # get the $sha
    #   $ git reset --hard $sha
    drop    = ! confirm "Are you sure you want to DROP this commit? [y/n] " && git reset --hard HEAD~1

    f       = fetch
    fa      = fetch --all --prune

    graph   = log --graph

    hashes  = log --format="%h"
    hashes40= log --format="%H"

    isempty = ! test $(git bl | wc -l) -eq 0

    null    = hash-object -t tree /dev/null

    l       = log
    lol     = log --pretty=line
    ls      = log --stat

    lsm     = ! git-ls-mtime

    ma      = merge --abort
    # merge-resolve: Open all files with merge conflicts in
    #   an editor and automatically highlight the conflicts
    mr      = ! $EDITOR "$(git unmerged)" '+/\\(<\\|=\\||\\|>\\)\\{7\\}'

    ra      = rebase --abort
    rc      = rebase --continue
    ri      = rebase --interactive

    # get a "canonical" repo name
    rname   = ! basename "$(git root)"

    # get the "root" git dir, even if we're in a (managed) worktree
    root    = "! __git_root() { \
                    local repo="$(git dir)"; \
                    if [ -L "$repo/.wt/root" ]; then \
                        repo="$(readlink "$repo/.wt/root")"; \
                    fi; \
                    echo "$repo"; \
                }; __git_root"

    s       = status --short --branch
    st      = status

    tracked = ! git diff --stat "$(git null)"

    # undo-commit-amend
    # see: https://stackoverflow.com/a/1459264
    uca     = ! git reset --soft HEAD@{1} && git commit -c HEAD@{1}

    uncommit= reset --soft HEAD~1 --

    unmerged= ! git status --short --branch | sed -nE 's/^(U.|.U) (.*)$/\\2/p'

    unstage = reset HEAD --

    url     = ls-remote --get-url

[core]
    excludesfile = ~/.gitignore

[include]
    # local customization
    path    = ~/.gitconfig.local
