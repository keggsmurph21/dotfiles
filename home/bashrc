# Prelude {{{

# vim: foldmethod=marker:foldlevel=0

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# }}}

# Shell options {{{

shopt -s histappend
shopt -s checkwinsize
shopt -s globstar

# }}}

# History {{{

HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000
HISTIGNORE="pwd"

# }}}

# Prompt {{{

__prompt_rc_color() {
    if [[ $? -eq 0 ]]; then
        echo -e '\e[01;32m' # bright green
    else
        echo -e '\e[0;32m' # normal green
    fi
}
PS1='\[`__prompt_rc_color`\]\u@\h\[\e[0m\]:\[\e[01;34m\]\w\[\e[0m\]\$ '

# }}}

# Exports {{{

export DOTFILES_DIR="$HOME/src/keggsmurph21/dotfiles"
export PATH="$HOME/.local/bin:$DOTFILES_DIR/bin:$HOME/.cargo/bin:$PATH"
export EDITOR=vim
export VISUAL=vim
export PAGER=less
export VIRTUALENVWRAPPER_SCRIPT=~/.local/bin/virtualenvwrapper.sh
export WORKON_HOME=~/.virtualenvs
export PIP_REQUIRE_VIRTUALENV=true
export PIP_DOWNLOAD_CACHE="$HOME/.cache/pip"
export NVM_DIR="$HOME/.nvm"
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export PRE_CXX=ccache
export BROWSER=firefox

if which go &>/dev/null; then
    export GOPATH=$(go env GOPATH)
    export PATH="$PATH:$GOPATH/bin"
fi

# }}}

# Aliases {{{

# system {{{
alias sudo="sudo " # allow $ sudo <alias>
alias vi=vim
alias pip="python -m pip"
alias g=git
alias d=dot
alias pwd="pwd -P"
alias tree="tree -a -I '.git|__pycache__|*.pyc|.mypy_cache|.nox|*.egg-info|.pytest_cache|*.o|CMakeFiles'"
alias grep="grep --color=auto --devices=skip -I"
alias hl=highlight
if which hub &>/dev/null; then
    alias git=hub
fi
alias wt=__wt_main
# }}}

# bash rc files {{{
alias bashrc="vim $HOME/.bashrc && . $HOME/.bashrc"
alias bashrclocal="vim $HOME/.bashrc.local && . $HOME/.bashrc"
alias bashrcmacos="vim $HOME/.bashrc.macos && . $HOME/.bashrc"
alias bashrclinux="vim $HOME/.bashrc.linux && . $HOME/.bashrc"
# }}}

# other rc files {{{
alias bashprofile="vim $HOME/.bash_profile"
alias bashlogout="vim $HOME/.bash_logout"
alias vimrc="vim $HOME/.vimrc"
alias vimrclocal="vim $HOME/.vimrc.local"
alias sshconf="vim $HOME/.ssh/config"
alias gitconf="vim $HOME/.gitconfig"
alias inputrc="vim $HOME/.inputrc"
alias xinitrc="vim $HOME/.xinitrc"
# }}}

# one-liners {{{
alias peek='tee >(cat 1>&2)' # mirror stdout to stderr (for seeing data thru pipe)
alias gtrim="trim \$(git status --porcelain | sed 's/^...//g')"
alias ipaddr="curl https://api.ipify.org/"
alias weather="curl https://wttr.in"
alias late="curl https://cheat.sh/latencies"
# }}}

# completions for aliases {{{
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main d
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main dot
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main g
# }}}

# }}}

# Functions {{{

# trim whitespace
trim() {
    for file in "$@"; do
        sed -E 's/\s+$//g' -i $file
    done
}

# see where python is importing a module from
pywhich() {
    for module in "$@"; do
        python -c "import $module; print($module.__file__)";
    done
}
pywhich3() {
    for module in "$@"; do
        python3 -c "import $module; print($module.__file__)";
    done
}

# pip without a venv
gpip() {
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

git-find() {
    git ls-files $(git root) | grep "$@"
}

# host a text file
0x0st() {
    local f
    if [[ $# -eq 0 ]]; then
        f="-"
    elif [[ $# -eq 1 ]]; then
        f="$1"
    else
        echo "Too many arguments!" >&2
        return 1
    fi
    curl -F"file=@$f" http://0x0.st
}

# interact with DOTFILES repo from anywhere
dot() {
    pushd "$DOTFILES_DIR" >/dev/null
    git "$@"
    popd >/dev/null
}

# get list of all mac-generated files
find-mac-files() {
    find "$@" -type f \( -name '._*' -or -name .DS_Store \)
}

# interactively check spelling
spellcheck() {
    f=$(mktemp)
    echo "Words to spellcheck (^D to end):" >&2
    cat >> $f
    aspell check $f
    echo && echo "Spellchecked words:" >&2
    tail -n+1 $f
}

# use bin/mark to change directory
mg() {
    if [[ $# -eq 0 ]]; then
        mark get
    else
        local dest="$(mark get "$@")"
        if [[ "$dest" != null ]]; then
            cd "$dest"
        else
            echo "mark not set: \"$@\"" >&2
        fi
    fi
}

ms() {
    if [[ $# -eq 0 ]]; then
        mark set
    else
        mark set "$@"
    fi
}

# }}}

# Other sources {{{

__src() {
    [ -r "$1" ] && . "$1" &>/dev/null || true
}

# source external files
for file in $(ls "$DOTFILES_DIR/bash-sources"); do
    __src "$DOTFILES_DIR/bash-sources/$file"
done
__src "/usr/share/bash-completion/bash_completion"
__src "$HOME/.tokens"
__src "$HOME/.local/bin/virtualenvwrapper_lazy.sh"
__src "$HOME/.opam/opam-init/init.sh"
__src "$NVM_DIR/nvm.sh"
__src "$NVM_DIR/bash_completion"
__src "$HOME/src/github/hub/etc/hub.bash_completion.sh"
case "$OSTYPE" in
    linux-gnu)  __src "$HOME/.bashrc.linux" ;;
    darwin*)    __src "$HOME/.bashrc.macos" ;;
    *)          echo "unrecognized OSTYPE: $OSTYPE" >&2 ;;
esac
__src "$HOME/.bashrc.local"

unset __src

# }}}

# Misc {{{

# read the inputrc file if it exists
[ -r "$HOME/.inputrc" ] && bind -f "$HOME/.inputrc"

# start the ssh-agent
eval "$(ssh-agent)" >/dev/null

# }}}
